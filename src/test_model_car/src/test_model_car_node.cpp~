#include "ros/ros.h"
#include <std_msgs/String.h>
#include <std_msgs/Int16.h>
#include <std_msgs/Float32.h>

class test_head
{
public:
	test_head(ros::NodeHandle nh)
	{
	    light_publisher=nh.advertise<std_msgs::String>(nh.resolveName("manual_control/lights"), 10);
	    steering_publisher=nh.advertise<std_msgs::Int16>(nh.resolveName("manual_control/steering"), 10);
            speed_publisher=nh.advertise<std_msgs::Int16>(nh.resolveName("manual_control/speed"), 10);
	    head_subscriber = nh.subscribe("model_car/yaw", 1, &test_head::headCallback,this);
	}
	~test_head(){}

    void headCallback(const std_msgs::Float32& head)
	{
		if (head.data < 0.0 && head.data > -90.0){
        		yaw=0;
		}else if (head.data < 0.0 && head.data < -90.0){
			yaw=180;
		}else{
			yaw=head.data;		
		}     
		steering_command.data=yaw;
		steering_publisher.publish(steering_command);
		
if(head.data<92&&head.data>88.0){
speed_command.data=0;
speed_publisher.publish(speed_command);//detenemos
}else{
speed_command.data=-300;
speed_publisher.publish(speed_command);//avanzamos
}		


	}
private:
    ros::Subscriber head_subscriber;
    ros::Publisher light_publisher;
    std_msgs::String light_command;
    ros::Publisher steering_publisher;
    std_msgs::Int16 steering_command;
    ros::Publisher speed_publisher;
    std_msgs::Int16 speed_command;
	int yaw;

};

int main(int argc, char **argv)
{
    ros::init(argc, argv, "test_model_car_node");
    ros::NodeHandle nh; 

    test_head test_head_obj(nh);
    //ros::Rate rate(0.5); //0.5 Hz, every 2 second

	while(ros::ok())
	{
		//rate.sleep();
		ros::spinOnce();
	}
    return 0;
}
