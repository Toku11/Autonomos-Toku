#!/usr/bin/env python

import sys
import rospy
import roslib
import serial
import struct
from std_msgs.msg import MultiArrayLayout, ByteMultiArray, String

ser1 = serial.Serial('/dev/ttyACM0',9600)
ser2 = serial.Serial('/dev/ttyAMA0', 57600, timeout = None)

data_dict = {}   
data_keys = ('inicio', 'Roll', 'Pitch', 'Yaw', 'Alt', 'Volt', 'Num', 'Latitude', 'Longitude', 'Num_Sat', 'Comando', 'Mot_1', 'Mot_2', 'Mot_3', 'Mot_4', 'Pos_x_m','Pos_y_m','Vel_x','Vel_y','final')

tam_roll = 0
tam_pitch = 0
tam_yaw = 0
tam_alt = 0
tam_bat = 0
tam_lat = 0
tam_lon = 0
tam_n_s = 0

class data_pix:

	def __init__(self):
		#self.pub = rospy.Publisher('chat_pix', ByteMultiArray, queue_size=1)
		self.pub = rospy.Publisher('chat_pix', String, queue_size=1)
		#self.byte_list = []
		self.hola = ''
		self.pixhawk

	def pixhawk(self):

		#rospy.init_node('pixhawk',anonymous=True)
		rate = rospy.Rate(10)
		while not rospy.is_shutdown():
			data_pix = ser1.readline()
			#print data_pix
			data_list = data_pix.split(",")

			if data_list[0]=='fe' and data_list[19]=='ef':
				for x in range(1,len(data_keys)-1):
					data_dict[data_keys[x]] = float(data_list[x].strip('\r\n').strip('\t'))

				roll = bytearray(struct.pack('f',data_dict['Roll']))
				pitch = bytearray(struct.pack('f',data_dict['Pitch']))
				yaw = bytearray(struct.pack('f',data_dict['Yaw']))
				alt = bytearray(struct.pack('f',data_dict['Alt']))
				bat = bytearray(struct.pack('f',data_dict['Volt']))
				lat = bytearray(struct.pack('f',data_dict['Latitude']))
				lon = bytearray(struct.pack('f',data_dict['Longitude']))
				n_s = bytearray(struct.pack('f',data_dict['Num_Sat']))
				m_1 = bytearray(struct.pack('f',data_dict['Mot_1']))
				m_2 = bytearray(struct.pack('f',data_dict['Mot_2']))
				m_3 = bytearray(struct.pack('f',data_dict['Mot_3']))
				m_4 = bytearray(struct.pack('f',data_dict['Mot_4']))
				pos_x_m = bytearray(struct.pack('f',data_dict['Pos_x_m']))
				pos_y_m = bytearray(struct.pack('f',data_dict['Pos_y_m']))
				vel_x = bytearray(struct.pack('f',data_dict['Vel_x']))
				vel_y = bytearray(struct.pack('f',data_dict['Vel_y']))                                    
				tam_roll = int(len(roll))
				tam_pitch = int(len(pitch))
				tam_yaw = int(len(yaw))
				tam_alt = int(len(alt))
				tam_bat = int(len(bat))
				tam_lat = int(len(lat))
				tam_lon = int(len(lon))
				tam_n_s = int(len(n_s))
				tam_m_1 = int(len(m_1))
				tam_m_2 = int(len(m_2))
				tam_m_3 = int(len(m_3))
				tam_m_4 = int(len(m_4))
				tam_pos_x_m = int(len(pos_x_m))
				tam_pos_y_m = int(len(pos_y_m))
				tam_vel_x = int(len(vel_x))
				tam_vel_y = int(len(vel_y))
				tx_c3 = bytearray.fromhex('FE51AA01DD02040000AA01CC02FE4101020304010203040102030401020304010203040102030401020304010203040102030401020304010203040102030401020304010203040102030401020304EF0000EF')

				for i in range(1,tam_roll):
					tx_c3[14+i]=roll[tam_roll-i]
				for i in range(1,tam_pitch):
					tx_c3[18+i]=pitch[tam_pitch-i]
				for i in range(1,tam_yaw):
					tx_c3[22+i]=yaw[tam_yaw-i]
				for i in range(1,tam_alt):
					tx_c3[26+i]=alt[tam_alt-i]
				for i in range(1,tam_bat):
					tx_c3[30+i]=bat[tam_bat-i]
				for i in range(1,tam_lat):
					tx_c3[34+i]=lat[tam_lat-i]
				for i in range(1,tam_lon):
					tx_c3[38+i]=lon[tam_lon-i]
				for i in range(1,tam_n_s):
					tx_c3[42+i]=n_s[tam_n_s-i]
				for i in range(1,tam_m_1):
					tx_c3[46+i]=m_1[tam_m_1-i] 
				for i in range(1,tam_m_2):
					tx_c3[50+i]=m_2[tam_m_2-i]
				for i in range(1,tam_m_3):
					tx_c3[54+i]=m_3[tam_m_3-i]
				for i in range(1,tam_m_4):
					tx_c3[58+i]=m_4[tam_m_4-i]
				for i in range(1,tam_pos_x_m):
					tx_c3[62+i]=pos_x_m[tam_pos_x_m-i]
				for i in range(1,tam_pos_y_m):
					tx_c3[66+i]=pos_y_m[tam_pos_y_m-i]
				for i in range(1,tam_vel_x):
					tx_c3[70+i]=vel_x[tam_vel_x-i]
				for i in range(1,tam_vel_y):
					tx_c3[74+i]=vel_y[tam_vel_y-i]
                        
            #print [ "0x%02x" % b for b in tx_c3 ]
            #print data_dict['Volt']
            #print data_dict['Alt']
				#print data_dict['Comando']
				#print data_dict['Mot_1']
				#print data_dict['Mot_2']
				#print data_dict['Mot_3']
				#print data_dict['Mot_4']

            #for key in data_dict:
                    #	print key + ":" + data_dict[key]
            
            #self.byte_list.data(tx_c3)
            #rospy.loginfo(self.byte_list)
            #self.pub.publish(self.byte_list)

				self.hola = 'hola mundo'
				rospy.loginfo(self.hola)
				self.pub.publish(self.hola)   		
				#rate.sleep()
				ser2.write(tx_c3)

def main(args):
 	'''Initializes and cleanup ros node'''
	ic = data_pix()
	rospy.init_node('data_pix',anonymous=True)
	#print("Llega a esto")
	try:
	     ic.pixhawk()
	except KeyboardInterrupt:
	      pass

if __name__ == '__main__':
	main(sys.argv)
